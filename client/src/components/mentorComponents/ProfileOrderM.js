import React, {useContext, useEffect, useState} from 'react';
import {useHttp} from "../../hooks/http.hook";
import {AuthContext} from "../../context/auth.context";
import {Link, useHistory} from "react-router-dom";
import io from "../../socket-io-client";
import {Notification} from "../generalComponents/Notification";



export const ProfileOrderM = ({order}) => {

    const {request, loading, error, clearError} = useHttp();

    const [activeNotification, setActiveNotification] = useState(false);

    useEffect(() => {

        if (error) {

            setActiveNotification(true)

        }

    }, [error]);

    const authContext = useContext(AuthContext);

    const [liked, setLiked] = useState({...order});

    const [response, setResponse] = useState(null);

    const history = useHistory();

    const respond = async (orderId) => {

        const status = await request('/api/order-mentor/respond', 'POST', {orderId: orderId}, {Authorization: `Bearer ${authContext.token}`})

        setResponse(status.id_order);

        await io.emit('NOTICE_MENTOR', {userId: authContext.userId, orderId: orderId, noticeType: 'response'});

    };

    const unrespond = async (orderId) => {

        const status = await request('/api/uninviting/uninvitingMentor', 'POST', {orderId: orderId}, {Authorization: `Bearer ${authContext.token}`})

        if (status.order_id === orderId) history.push('/suitableapp');

        // await io.emit('NOTICE_MENTOR', {userId: authContext.userId, orderId: orderId, noticeType: 'response'});

    };

    const insert = async (orderId) => {

        await request('/api/liked/mentorLiked', 'POST', {orderId}, {'Authorization': `Bearer ${authContext.token}`});

        setLiked({...liked, liked: true});

    }

    const deleted = async (orderId) => {

        await request('/api/liked/mentorUnliked', 'POST', {orderId}, {'Authorization': `Bearer ${authContext.token}`});

        setLiked({...liked, liked: false});

    }

    return(
            <div className={'center'}>
                <Notification active={activeNotification} clearError={clearError} setActive={setActiveNotification} error={error}/>
                <h3 style={{'backgroundColor': '#4dc3ff','color':'white','fontWeight':'bold'}}>–ó–∞—è–≤–∫–∞</h3>
                <div>
                    {liked.liked && <h3 onClick={() => deleted(order.id_order)} style={{'color':'black'}}>‚ù§Ô∏è</h3> || <h3 onClick={() => insert(order.id_order)} style={{'color':'black'}}>ü§ç</h3>}
                    <h5 style={{'color':'#ffa000', 'fontWeight': 'bold'}}>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <span style={{'color':'#03a9f4'}}>{order.id_order}</span></h5>
                    <h5 style={{'color':'#ffa000', 'fontWeight': 'bold'}}>–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <span style={{'color':'#03a9f4'}}>{order.direction}</span></h5>
                    <h5 style={{'color':'#ffa000', 'fontWeight': 'bold'}}>–û–ø—ã—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <span style={{'color':'#03a9f4'}}>{order.experience}</span></h5>
                    <h5 style={{'color':'#ffa000', 'fontWeight': 'bold'}}>–ì–æ—Ä–æ–¥: <span style={{'color':'#03a9f4'}}>{order.city}</span></h5>
                    <h5 style={{'color':'#ffa000', 'fontWeight': 'bold'}}>–ü–æ–ª –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <span style={{'color':'#03a9f4'}}>{order.sex}</span></h5>
                    <h5 style={{'color':'#ffa000', 'fontWeight': 'bold'}}>–¢–∏–ø –∑–∞–Ω—è—Ç–∏–π: <span style={{'color':'#03a9f4'}}>{order.type}</span></h5>
                    <h5 style={{'color':'#ffa000', 'fontWeight': 'bold'}}>–¶–µ–Ω–∞ –æ—Ç: <span style={{'color':'#03a9f4'}}>{order.price}</span></h5>
                    <h5 style={{'color':'#ffa000', 'fontWeight': 'bold'}}>–í–æ–∑—Ä–∞—Å—Ç –æ—Ç: <span style={{'color':'#03a9f4'}}>{order.ageFrom}</span></h5>
                    <h5 style={{'color':'#ffa000', 'fontWeight': 'bold'}}>–í–æ–∑—Ä–∞—Å—Ç –¥–æ: <span style={{'color':'#03a9f4'}}>{order.ageTo}</span></h5>
                    <h5 style={{'color':'#ffa000', 'fontWeight': 'bold'}}>–ü–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ: <span style={{'color':'#03a9f4'}}>{order.suggestions}</span></h5>
                    <p>–ë—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ {order.datetime}</p>
                    <h5 style={{'color':'#a62bdb', 'fontWeight': 'bold'}}>
                        <span style={{'color':'#f4033b'}}>
                            {
                                order.invited === 'true' && <Link to={`/viewProfstudent/${order.id_order}/${order.student_id}`}>{order.email}</Link>
                                ||
                                order.invited === 'reject' && '–í–∞–º –æ—Ç–∫–∞–∑–∞–ª–∏, –Ω–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—åü§ï'
                                ||
                                order.invited === 'null' && ' –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'
                            }
                        </span>
                    </h5>
                </div>
                {
                    order.invited === 'true' && <Link to={`/chat/${order.id_response}`}><button className={'btn green'}>–ß–∞—Ç</button></Link>
                    ||
                    (order.id_response || response) && <p>–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É</p>
                    ||
                    <div>
                        <button
                            onClick={() => respond(order.id_order)}
                            disabled={loading}
                            className="waves-effect waves-light btn blue"
                        >
                            –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
                        </button>
                        <button
                            onClick={() => unrespond(order.id_order)}
                            disabled={loading}
                            className="waves-effect waves-light btn red"
                        >
                            –ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
                        </button>
                    </div>
                }
            </div>
    );
};
